= The Basics = 
Files exist in filesystems, which can be scaled for a userbase from one to thousands of users.

There's increased work efficiency from users sharing the same resources on a many-users-to-one-system relationship. 

= Problem Definition = 
While typical access for a given file may be legitimate, when the owner of data does not adjust or monitor access, itâ€™s easy for security requirements to relax, leaving companies at risk.

Easy and effective means to protect information and resources must be made available to those responsible for its security. 

= Solution Basics =
Being that natural language is the most direct way to input a command, we propose a program which allows for natural input that will both implement policies to build secure access and receive inquiries to grant or deny access to the inquirer.

It will accept everything from simple privacy statements to fully customized schedules of access to highly confidential data.

= Data Description =
A given network with subjects, objects, and defined relationships can be interpreted as a directed labeled graph (vertices connected by edges)
[TODO: Graph here]
\begin{enumerate}
    \item $N$ is a finite set of subjects $(S)$ and objects $(O)$, that may include an environmental condition.
    \item $\Sigma$ is a finite set of relationship types (labels for connections).
    \item $W$ is a number attached to a relationship between two subjects. This is a percentage of trust between two users.
    \item $E \subseteq N \times N \times \Sigma \times W$ represents the edges of existing connections, the relationships between subjects and objects, objects and other objects, and represents a general overview of the possible authorized interactions within that network\cite{morovat16}.
\end{enumerate}

All types of data in a file system are at risk when access is not clearly defined. Our system will allow for clear and direct definitions of security policies or access inquiries.

= Solution Specifics =
Our system will use a well-formed notation for both specifying access control policies and authorizing access when inquiries against data are made. 
[TODO: Graphical example of well-formed notation]

Our solution stands as a faithful implementation of Dr. Morovat's own Policy Based Language for Access Control \cite{morovat16}. 

Users will define policies and make inquiries in English via an access control interface. It will recognize user names, target resources, 'Access' words like "Read", "write", and "modify", including common negations. Objects themselves may be referenced by filetype (i.e. "photos" = jpg, gif, etc, and "documents" = txt, docx, etc.).

Our program will then transform these inputs, using the well-formed format described below, into system rules and access queries.
Given sentences will be in the format: Subject verb object [conditional(time/date)]. 
[Graphical example of change: "Bob cannot update project-tasks.docx on weekends."]
\begin{itemize}
    \item Target users, which get policies protecting them from unauthorized access
    \item Target resources, which get policies protecting them from unmanaged actions
\end{itemize}
It will group inquiries into two groups:
\begin{itemize}
    \item Attempting to perform an operation against resources like updating or deleting resource
    \item Attempting to access target users (e.g. Facebook may consider this in terms of 'tagging' in a photo or 'poking' a target user)
\end{itemize}
The well-formed format template we will use indicates the following:
\begin{itemize}
    \item Words in policy/ inquiry appear with order: subject, verb, object
    \item Words in rule/request appear with order: subject, action, object
\end{itemize}

= End User Experience =
Our UI is simple, but flexible, allowing it to be presented within an intranet-based web-application or localized desktop application as companies may wish to have more granular control over its presentation. 

= Flowchart Description =
[TODO: A flowchart: user input, breaking up for user/resource recognition, parsing for grammar, access, negation, and output to well-formed format]
